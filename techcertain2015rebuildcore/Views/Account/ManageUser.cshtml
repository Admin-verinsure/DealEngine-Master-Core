@model techcertain2015rebuildcore.Models.ViewModels.Account.ManageUserViewModel

<!-- MAIN CONTENT -->
<div id="content">
    <div class="row">
		
    	<!-- NEW WIDGET START -->
        <article class="col-xs-12 col-sm-12 col-md-6 col-lg-6">
        @if (Model.HasRole("CanEditUser")) {
            <!-- Widget ID (each widget will need unique ID)-->
            <div class="jarviswidget jarviswidget-color-darken" id="wid-id-0" data-widget-editbutton="false">
                <header>
                    <span class="widget-icon"> <i class="fa fa-table"></i> </span>
                    <h2>Edit User </h2>
                </header>

                <!-- widget div-->
                <div role="content">
                    <!-- widget edit box -->
                    <div class="jarviswidget-editbox">
                        <!-- This area used as dropdown edit box -->
                    </div>
                    <!-- end widget edit box -->
                    <!-- widget content -->
                    <div class="widget-body">
					@using (Html.BeginForm())
					{
					    @Html.AntiForgeryToken()
					    <div class="form-horizontal">
					        <fieldset>
						        @Html.ValidationSummary(true)
						        <div class="form-group">
						            <div class="col-md-10">
						                @Html.HiddenFor(m => m.Id)
						            </div>
						        </div>
                                <div class="form-group">
                                    @Html.LabelFor(m => m.Username, new { htmlAttributes = new { @class = "col-md-2 control-label" } })
                                    <div class="col-md-10">
                                        @Html.TextBoxFor(m => m.Username)
                                    </div>
                                </div>
						        <div class="form-group">
									@Html.LabelFor(m => m.FirstName, new { htmlAttributes = new { @class = "col-md-2 control-label" } })
                                    <div class="col-md-10">
						                @Html.TextBoxFor(m => m.FirstName)
						            </div>
						        </div>
                                <div class="form-group">
                                    @Html.LabelFor(m => m.LastName, new { htmlAttributes = new { @class = "col-md-2 control-label" } })                                    
                                    <div class="col-md-10">
                                        @Html.TextBoxFor(m => m.LastName)
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(m => m.Email, new { htmlAttributes = new { @class = "col-md-2 control-label" } })                              
                                    <div class="col-md-10">
                                        @Html.TextBoxFor(m => m.Email)
                                    </div>
                                </div>
							</fieldset>
						</div>
					}
					</div>
				</div>
			</div>
		}
            <!-- Widget ID (each widget will need unique ID)-->
            <div class="jarviswidget jarviswidget-color-darken" id="wid-id-1" data-widget-editbutton="false">
                <header>
                    <span class="widget-icon"> <i class="fa fa-table"></i> </span>
                    <h2>Account Monitor </h2>
                    @*
                    Display account info (date created, locked/deleted/banned, etc) and functions (lock account, issue password reset
					*@
                </header>

                <!-- widget div-->
                <div>
                    <!-- widget edit box -->
                    <div class="jarviswidget-editbox">
                        <!-- This area used as dropdown edit box -->
                    </div>
                    <!-- end widget edit box -->
                    <!-- widget content -->
                    <div class="widget-body">

					    <div class="form-horizontal">
					        <fieldset>
								<legend>Account Status</legend>
                                <div class="form-group">
                                    @Html.LabelFor(m => m.AccountStatus.IsLocked, new { htmlAttributes = new { @class = "col-md-2 control-label", @ShowRequiredStar = false } })
                                    <div class="col-md-10">
                                        <div class="row">
                                            <div class="col-sm-12">
                                                <div class="input-group">

                                                    @Html.TextBoxFor(m => m.AccountStatus.LockedMessage, new { htmlAttributes = new { @Readonly = true } })
                                                    <div class="input-group-btn">
                                                        @if (Model.AccountStatus.IsLocked)
                                                        {
                                                            <button class="btn-success" onclick="LockOrUnlock(@Model.Id, 'unlock');">
                                                                Unlock Account
                                                            </button>
                                                        }
                                                        else
                                                        {
                                                            <button class="btn-success" onclick="LockOrUnlock(@Model.Id, 'lock');">
                                                                Lock Account
                                                            </button>
                                                        }
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
								<legend>Password</legend>
                                <div class="form-group">
                                    @Html.LabelFor(m => m.AccountStatus.LastPasswordResetIssued, new { htmlAttributes = new { @class = "col-md-4 col-lg-3 control-label", @ShowRequiredStar = false } })
                                    <div class="col-md-8 col-lg-9">
                                        <div class="row">
                                            <div class="col-sm-12">
                                                @Html.TextBoxFor(m => m.AccountStatus.LastPasswordResetIssued, new { htmlAttributes = new { @Readonly = true } })                            
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(m => m.AccountStatus.PasswordResetExpiryDate, new { htmlAttributes = new { @class = "col-md-4 col-lg-3 control-label", @ShowRequiredStar = false } })
                                    <div class="col-md-8 col-lg-9">
                                        <div class="row">
                                            <div class="col-sm-12">
                                                @Html.TextBoxFor(m => m.AccountStatus.PasswordResetExpiryDate, new { htmlAttributes = new { @Readonly = true } })                
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(m => m.AccountStatus.PasswordResetStatus, new { htmlAttributes = new { @class = "col-md-4 col-lg-3 control-label", @ShowRequiredStar = false } })
                                    <div class="col-md-8 col-lg-9">
                                        <div class="row">
                                            <div class="col-sm-12">
                                                @Html.TextBoxFor(m => m.AccountStatus.PasswordResetStatus, new { htmlAttributes = new { @Readonly = true } })
                                            </div>
                                        </div>
                                    </div>
                                </div>
							</fieldset>
						</div>
					</div>
				</div>
			</div>
		</article>
		
    	<!-- NEW WIDGET START -->
        <article class="col-xs-12 col-sm-12 col-md-6 col-lg-6">
        @if (Model.HasRole("CanEditUser")) {
            <!-- Widget ID (each widget will need unique ID)-->
            <div class="jarviswidget jarviswidget-color-darken" id="wid-id-2" data-widget-editbutton="false">
                <header>
                    <span class="widget-icon"> <i class="fa fa-table"></i> </span>
                    <h2>Manage User Groups </h2>
                    @*
                    Edit user groups here
					*@
                </header>

                <!-- widget div-->
                <div>
                    <!-- widget edit box -->
                    <div class="jarviswidget-editbox">
                        <!-- This area used as dropdown edit box -->
                    </div>
                    <!-- end widget edit box -->
                    <!-- widget content -->
                    <div class="widget-body">
					@using (Html.BeginForm("SetUserGroups", "Groups"))
					{
					    @Html.AntiForgeryToken()
					    <div class="form-horizontal">
					        @Html.ValidationSummary(true)

					        <div class="form-group">
					            <div class="col-md-12">
					                @*Html.HiddenFor(model => model.Id)*@
					                <input type="hidden" id="UserId" name="UserId" value="@Model.Id"/>
					            </div>
					        </div>
					        <fieldset>
					       		<legend>Select Group Assignments for @Html.DisplayFor(model => model.FirstName)</legend>
							@* Ugly, but needed since the Html.CheckboxFor breaks styling due to its following hidden input *@
					        @for (int i = 0; i < Model.UserGroups.Groups.Count; i++)
					        {
								@*Html.HiddenFor(item => Model.UserGroups.Groups[i].GroupId)*@
					            <input type="hidden" id="Groups_@(i)__GroupId" name="Groups[@(i)].GroupId" value="@Model.UserGroups.Groups[i].GroupId"/>

								<div class="form-group">
									<div class="col-md-12">
										<div class="checkbox">
											<label>
												<input @if(Model.UserGroups.Groups[i].Selected == true) { <text>checked="checked"</text> } 
													class="checkbox style-0" data-val="true" data-val-required="The Selected field is required." id="Groups_@(i)__Selected" name="Groups[@(i)].Selected" value="true" type="checkbox">
												<span>@Html.DisplayFor(item => Model.UserGroups.Groups[i].GroupName)</span>
											</label>
										</div>
									</div>
								</div>
					        }
							</fieldset>
					        <hr />
						    <div class="form-group">
					            <div class="col-md-12">
					                <input type="submit" value="Save" class="btn btn-default" />
					            </div>
						    </div>
						</div>
					}
					</div>
				</div>
			</div>
		}
		</article>
	</div>
</div>
<!-- END MAIN CONTENT -->

@section pagespecific {
<script type="text/javascript">
$(document).ready(function () {
	
});

function LockOrUnlock(userId, status) {
	console.log(status);

	if (status == 'lock')
		if (confirm("Lock this Account?") == false)
			return;
	else if (status == 'unlock')
		if (confirm("Unlock this Account?") == false)
			return;
	else
		return;


	var postData = {
		'Id': userId,
		'Status': status
	};
	//postData['Id'] = userId;
	
	$.ajax({
     	// change back once mono decides to fix
        url: '@Url.Action("Lock", "Account")',
        type: "POST",
	    data: postData
    })
    .done(function (data) {
        $.smallBox({
            title: "Success",
            content: "Account lock status has been changed",
            color: "#5F895F",
            iconSmall: "fa fa-check bounce animated",
            timeout: 4000
        });
		location.reload();
    })
    .fail(function (xhr, httpStatusMessage, customErrorMessage) {
        alert(customErrorMessage);
    });
}
</script>
}