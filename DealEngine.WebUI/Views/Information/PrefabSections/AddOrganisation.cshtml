@model DealEngine.WebUI.Models.InformationViewModel


<div id="AddOrganisation">
    <ul class="nav nav-tabs" role="tablist">
        <li class="nav-item" id="tab1">
            <a class="nav-link active" href="#OrganisationTab1" data-toggle="tab" onclick="ResetForm('OrganisationTab3','OrganisationTab2', 'Organisation', 'OrganisationSubmitBtn', 'OrganisationClearButton')"> List All </a>
        </li>
        <li class="nav-item" id="tab2">
            <a class="nav-link" href="#OrganisationTab2" data-toggle="tab"> Edit </a>
        </li>
        <li class="nav-item" id="tab3">
            <a class="nav-link" href="#OrganisationTab3" data-toggle="tab" onclick="ResetForm('OrganisationTab3','OrganisationTab2', 'Organisation', 'OrganisationSubmitBtn', 'OrganisationClearButton')"> Add </a>
        </li>
        <li class="nav-item" id="tab4">
            <a class="nav-link" href="#OrganisationTab4" data-toggle="tab"> Removed </a>
        </li>
    </ul>
    <div class="tab-content">
        <div id="OrganisationTab1" class="tab-pane active" role="tabpanel">
            <table id="tblOrganisation"
                   class="table table-striped" width="100%"
                   data-show-columns="true"
                   data-pagination="true"
                   data-search="true"
                   data-show-jump-to="true">
                <thead>
                    <tr>
                        <th data-field="editButton" data-sortable="false"></th>
                        <th data-field="OrganisationName" data-sortable="true">Organisation Name</th>
                        <th data-field="OrganisationType" data-sortable="true">Organisation Type</th>
                        @if (Model.OrganisationViewModel.Programme.NamedPartyUnitName == "NZFSG Programme" ||
                        Model.OrganisationViewModel.Programme.NamedPartyUnitName == "TripleA Programme" ||
                        Model.OrganisationViewModel.Programme.NamedPartyUnitName == "NZPI Programme" ||
                        Model.OrganisationViewModel.Programme.NamedPartyUnitName == "Apollo Programme" ||
                        Model.OrganisationViewModel.Programme.NamedPartyUnitName == "Abbott Financial Advisor Liability Programme" ||
                        Model.OrganisationViewModel.Programme.NamedPartyUnitName == "Financial Advice NZ Financial Advice Provider Liability Programme"
                         )
                        {
                            <th data-field="IsPrincipal" data-sortable="true">Is Principal</th>
                        }

                        @if (Model.OrganisationViewModel.Programme.NamedPartyUnitName == "NZFSG Programme" ||
                       Model.OrganisationViewModel.Programme.NamedPartyUnitName == "TripleA Programme" ||
                       Model.OrganisationViewModel.Programme.NamedPartyUnitName == "NZPI Programme" ||
                       Model.OrganisationViewModel.Programme.NamedPartyUnitName == "Apollo Programme" ||
                       Model.OrganisationViewModel.Programme.NamedPartyUnitName == "Abbott Financial Advisor Liability Programme" ||
                       Model.OrganisationViewModel.Programme.NamedPartyUnitName == "Financial Advice NZ Financial Advice Provider Liability Programme"
                        )
                        {
                            <th data-field="IsFap" data-sortable="true">Is Fap</th>
                        }
                        <th data-field="deleteButton" data-sortable="false"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var organisation in Model.OrganisationViewModel.Organisations.Where(o => o.Id == Model.ClientInformationSheet.Owner.Id).ToList())
                    {
                        <tr id="@organisation.Id">
                            <td>
                                <button class="btn btn-success btn-sm" onclick="OnClick('Owner', 'Organisation', '@organisation.Id', '@Model.ClientInformationSheet.Id')"><i class="fa fa-edit"></i> Edit</button>
                            </td>
                            <td>
                                @organisation.Name
                            </td>
                            <td>
                                Owner
                            </td>
                            @if (Model.OrganisationViewModel.Programme.NamedPartyUnitName == "NZFSG Programme" ||
                           Model.OrganisationViewModel.Programme.NamedPartyUnitName == "TripleA Programme" ||
                           Model.OrganisationViewModel.Programme.NamedPartyUnitName == "NZPI Programme" ||
                           Model.OrganisationViewModel.Programme.NamedPartyUnitName == "Apollo Programme" ||
                           Model.OrganisationViewModel.Programme.NamedPartyUnitName == "Abbott Financial Advisor Liability Programme" ||
                           Model.OrganisationViewModel.Programme.NamedPartyUnitName == "Financial Advice NZ Financial Advice Provider Liability Programme"
                   )
                            {
                                <td>
                                </td>
                            }
                            <td>
                            </td>
                        </tr>
                    }
                    @foreach (var organisation in Model.OrganisationViewModel.Organisations.Where(o => o.Id != Model.ClientInformationSheet.Owner.Id && o.Removed != true).ToList())
                    {
                        <tr id="@organisation.Id">
                            <td>
                                @{
                                    bool ValidBackEndEmail = false;
                                    try
                                    {
                                        var addr = new System.Net.Mail.MailAddress(organisation.Email);
                                        ValidBackEndEmail = addr.Address == organisation.Email;
                                    }
                                    catch
                                    {
                                        ValidBackEndEmail = false;
                                    }
                                    @if (!ValidBackEndEmail)
                                    {
                                        @Html.Hidden("ValidBackEndEmail", organisation.Name)
                                    }

                                }
                                <button class="btn btn-success btn-sm" onclick="OnClick('', 'Organisation', '@organisation.Id', '@Model.ClientInformationSheet.Id')"><i class="fa fa-edit"></i> Edit</button>
                            </td>
                            <td>
                                @organisation.Name
                            </td>
                            <td>
                                @if (organisation.InsuranceAttributes.Any())
                                {
                                    @organisation.InsuranceAttributes.FirstOrDefault().Name
                                }
                            </td>
                            @if (Model.OrganisationViewModel.Programme.NamedPartyUnitName == "NZFSG Programme" ||
                           Model.OrganisationViewModel.Programme.NamedPartyUnitName == "TripleA Programme" ||
                           Model.OrganisationViewModel.Programme.NamedPartyUnitName == "Apollo Programme" ||
                           Model.OrganisationViewModel.Programme.NamedPartyUnitName == "Abbott Financial Advisor Liability Programme" ||
                           Model.OrganisationViewModel.Programme.NamedPartyUnitName == "Financial Advice NZ Financial Advice Provider Liability Programme"
                           )
                            {
                                <td>
                                    @{
                                        var gghg = organisation.OrganisationalUnits.FirstOrDefault(o => o.Name == "Advisor");
                                        var unit = (AdvisorUnit)organisation.OrganisationalUnits.FirstOrDefault(o => o.Name == "Advisor");

                                        //var unit = (AdvisorUnit)organisation.OrganisationalUnits.FirstOrDefault(o => o.Name == "Advisor" || o.Name == "Administration");
                                    }
                                    @if (unit != null)
                                    {
                                        @unit.IsPrincipalAdvisor
                                        <input id="IsPrincipal" data-IsPrincipal="@unit.IsPrincipalAdvisor" value="" type="hidden">

                                    }

                                </td>
                            }
                            @if (Model.OrganisationViewModel.Programme.NamedPartyUnitName == "NZPI Programme")
                            {
                                <td>
                                    @{
                                        var unit = (PlannerUnit)organisation.OrganisationalUnits.FirstOrDefault(o => o.Name == "Planner");
                                    }
                                    @if (unit != null)
                                    {
                                        @unit.IsPrincipalPlanner
                                        <input id="IsPrincipal" data-IsPrincipal="@unit.IsPrincipalPlanner" value="" type="hidden">
                                    }

                                </td>
                            }
                        <td>
                            <input id="IsFapOrg"  value="" type="hidden">

                        </td>
                            <td>
                                <button onclick="RemoveOrganisation('@organisation.Id', 'Insured Details / Named Parties')" type="button" class=" btn btn-danger btn-sm" id="trash"><span class="fa fa-trash"></span></button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div id="OrganisationTab2" class="tab-pane" role="tabpanel">
            <div class="form-group">
                <label>Select a Organisation from the 'List All' Tab and Click Edit Button</label>
            </div>
        </div>
        <div id="OrganisationTab3" class="tab-pane" role="tabpanel">
            @using (Html.BeginForm("AddOrganisation", "Organisation", FormMethod.Post, new { @id = "organisationViewModel", @name = "OrganisationViewModel" }))
            {
                @Html.HiddenFor(m => m.OrganisationViewModel.Organisation.Id, new { id = "Organisation.Id" })
                @Html.HiddenFor(m => m.OrganisationViewModel.User.Id, new { id = "User.Id" })
                @Html.HiddenFor(m => m.ClientInformationSheet.Id)
                @if (Model.OrganisationViewModel.Programme.NamedPartyUnitName == "NZFSG Programme")
                {
                    @Html.Hidden("AdministratorUnit", Model.OrganisationViewModel.AdministratorUnit.GetType().AssemblyQualifiedName, new { @id = "AdministratorUnit" })

                    @Html.Hidden("Unit", Model.OrganisationViewModel.AdvisorUnit.GetType().AssemblyQualifiedName, new { @id = "AdvisorUnit" })
                    @await Html.PartialAsync("PrefabSections/OrganisationPartials/NZFSG_AddOrganisation", Model)

                }
                @if (Model.OrganisationViewModel.Programme.NamedPartyUnitName == "Financial Advice NZ Financial Advice Provider Liability Run Off Programme" || Model.OrganisationViewModel.Programme.NamedPartyUnitName == "Apollo Run Off Programme")
                {

                    @await Html.PartialAsync("PrefabSections/OrganisationPartials/MarshRunOff", Model)

                }
                else if (Model.OrganisationViewModel.Programme.NamedPartyUnitName == "NZFSG ML Programme" || Model.OrganisationViewModel.Programme.NamedPartyUnitName == "Financial Advice NZ Financial Advice Provider Liability ML Programme"
                    || Model.OrganisationViewModel.Programme.NamedPartyUnitName == "Apollo ML Programme")
                {
                    @Html.Hidden("DirectorUnit", Model.OrganisationViewModel.DirectorUnit.GetType().AssemblyQualifiedName, new { @id = "DirectorUnit" })
                    @await Html.PartialAsync("PrefabSections/OrganisationPartials/NZFSG_ML_AddOrganisation", Model)
                }
                else if (Model.OrganisationViewModel.Programme.NamedPartyUnitName == "PMINZ Programme")
                {
                    @Html.Hidden("Unit", Model.OrganisationViewModel.PersonnelUnit.GetType().AssemblyQualifiedName, new { @id = "PersonnelUnit" })
                    @await Html.PartialAsync("PrefabSections/OrganisationPartials/PMINZ_AddOrganisation", Model)
                }
                else if (Model.OrganisationViewModel.Programme.NamedPartyUnitName == "DANZ Programme")
                {
                    @Html.Hidden("Unit", Model.OrganisationViewModel.PersonnelUnit.GetType().AssemblyQualifiedName, new { @id = "PersonnelUnit" })
                    @await Html.PartialAsync("PrefabSections/OrganisationPartials/DANZ_AddOrganisation", Model)
                }
                else if (Model.OrganisationViewModel.Programme.NamedPartyUnitName == "Technology Contractors Liability Programme")
                {
                    @Html.Hidden("Unit", Model.OrganisationViewModel.IndividualInsuredUnit.GetType().AssemblyQualifiedName, new { @id = "IndividualInsuredUnit" })
                    @await Html.PartialAsync("PrefabSections/OrganisationPartials/I2I_AddOrganisation", Model)
                }
                else if (Model.OrganisationViewModel.Programme.NamedPartyUnitName == "CEAS Programme")
                {
                    @Html.Hidden("Unit", Model.OrganisationViewModel.PrincipalUnit.GetType().AssemblyQualifiedName, new { @id = "PrincipalUnit" })
                    @await Html.PartialAsync("PrefabSections/OrganisationPartials/CEAS_AddOrganisation", Model)
                }
                else if (Model.OrganisationViewModel.Programme.NamedPartyUnitName == "NZACS Programme")
                {
                    @Html.Hidden("Unit", Model.OrganisationViewModel.PrincipalUnit.GetType().AssemblyQualifiedName, new { @id = "PrincipalUnit" })
                    @await Html.PartialAsync("PrefabSections/OrganisationPartials/NZACS_AddOrganisation", Model)
                }
                else if (Model.OrganisationViewModel.Programme.NamedPartyUnitName == "TripleA Programme")
                {
                    @Html.Hidden("AdministratorUnit", Model.OrganisationViewModel.AdministratorUnit.GetType().AssemblyQualifiedName, new { @id = "AdministratorUnit" })

                    @Html.Hidden("Unit", Model.OrganisationViewModel.AdvisorUnit.GetType().AssemblyQualifiedName, new { @id = "AdvisorUnit" })
                    @await Html.PartialAsync("PrefabSections/OrganisationPartials/TripleA_AddOrganisation", Model)
                }
                else if (Model.OrganisationViewModel.Programme.NamedPartyUnitName == "NZPI Programme")
                {

                    @Html.Hidden("Unit", Model.OrganisationViewModel.PlannerUnit.GetType().AssemblyQualifiedName, new { @id = "PlannerUnit" })
                    @await Html.PartialAsync("PrefabSections/OrganisationPartials/NZPI_AddOrganisation", Model)
                }
                else if (Model.OrganisationViewModel.Programme.NamedPartyUnitName == "First Mate Cover")
                {

                    @Html.Hidden("Unit", Model.OrganisationViewModel.InterestedPartyUnit.GetType().AssemblyQualifiedName, new { @id = "InterestedPartyUnit" })
                    @await Html.PartialAsync("PrefabSections/OrganisationPartials/FMC_AddOrganisation", Model)
                }
                else if (Model.OrganisationViewModel.Programme.NamedPartyUnitName == "Apollo Programme" || Model.OrganisationViewModel.Programme.NamedPartyUnitName == "Abbott Financial Advisor Liability Programme" ||
                    Model.OrganisationViewModel.Programme.NamedPartyUnitName == "Financial Advice NZ Financial Advice Provider Liability Programme")
                {
                    @Html.Hidden("AdministratorUnit", Model.OrganisationViewModel.AdministratorUnit.GetType().AssemblyQualifiedName, new { @id = "AdministratorUnit" })

                    @Html.Hidden("Unit", Model.OrganisationViewModel.AdvisorUnit.GetType().AssemblyQualifiedName, new { @id = "AdvisorUnit" })
                    @await Html.PartialAsync("PrefabSections/OrganisationPartials/Apollo_AddOrganisation", Model)


                }
                else if (Model.OrganisationViewModel.Programme.NamedPartyUnitName == "New Zealand Bar Association Liability Programme")
                {
                    @Html.Hidden("Unit", Model.OrganisationViewModel.EBaristerUnit.GetType().AssemblyQualifiedName, new { @id = "EBaristerUnit" })
                    @Html.Hidden("Unit", Model.OrganisationViewModel.JBaristerUnit.GetType().AssemblyQualifiedName, new { @id = "JBaristerUnit" })

                    @*@Html.Hidden("Unit", Model.OrganisationViewModel.InterestedPartyUnit.GetType().AssemblyQualifiedName, new { @id = "InterestedPartyUnit" })*@
                    @await Html.PartialAsync("PrefabSections/OrganisationPartials/NZBar_AddOrganisation", Model)
                }
                <div class="form-group">
                    <button class="btn btn-success" type="submit" id="OrganisationSubmitBtn" onclick="OnOrganisationSubmit('organisationViewModel', 'Insured Details / Named Parties')">Add</button>
                    <button class="btn btn-danger" id="OrganisationClearButton" onclick="ResetOrganisation('organisationViewModel');location.reload();"> Clear</button>
                </div>
            }

        </div>
        <div id="OrganisationTab4" class="tab-pane" role="tabpanel">
            <table id="tblorgremoved"
                   class="table table-striped" width="100%"
                   data-show-columns="true"
                   data-pagination="true"
                   data-search="true"
                   data-show-jump-to="true">
                <thead>
                    <tr>
                        <th data-field="editButton" data-sortable="false"></th>
                        <th data-field="OrganisationName" data-sortable="true">Organisation Name</th>
                        <th data-field="OrganisationType" data-sortable="true">Organisation Type</th>
                        <th data-field="deleteButton" data-sortable="false"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var organisation in Model.OrganisationViewModel.Organisations.Where(o => o.Id != Model.ClientInformationSheet.Owner.Id && o.Removed == true).ToList())
                    {
                        <tr id="@organisation.Id">
                            <td>
                                <button class="btn btn-success btn-sm" onclick="RestoreOrganisation('@organisation.Id', 'Insured Details / Named Parties')"><i class="fa fa-undo"></i> Restore</button>
                            </td>
                            <td>
                                @organisation.Name
                            </td>
                            <td>
                                @organisation.InsuranceAttributes.FirstOrDefault().Name
                            </td>
                            <td>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>