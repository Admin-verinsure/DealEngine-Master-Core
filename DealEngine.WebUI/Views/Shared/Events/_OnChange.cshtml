<script type="text/javascript">
    $(function () {
        //get all forms on load
        var forms = document.getElementsByClassName('is-valid');
        var formIds = [];
        for (var f = 0; f < forms.length; f++) {
            //get each form id
            formIds.push(forms[f].id);
        }
        for (var i = 0; i < formIds.length; i++) {
            var form = document.getElementById(formIds[i]);
            for (var e = 0; e < form.length; e++) {
                try {
                    if (form[e].id != "") {
                        element = document.getElementById(form[e].id);
                    }
                }
                catch (ex) {
                    //will have to add further function for forms with added elements
                }

                if (element != null) {
                    if (element.multiple == true && (form.id == "RoleDataViewModel" || form.id == "RevenueDataViewModel")) {
                        //need to cancel event for build tables i.e role/revenue
                    }
                    else {
                        OnChange(element.id, element.name);
                    }

                    //after first load change to default view
                    element.classList.remove("is-valid");
                    element.classList.remove("is-invalid");
                    element.classList.add("is-up");
                }
            }
        }
    });

    function OnChange(Id, Name) {
        var obj = document.getElementById(Id);
        var value = obj.value;
        var dataRule = obj.getAttribute('data-rule');
        var dataItem = obj.getAttribute('data-item');
        var tag = obj.tagName;
        obj.classList.remove("is-up");

        //validation
        if (obj.hasAttribute('required')) {
            if (tag == "SELECT") {
                SelectValidation(obj, value);
            } else if (tag == "INPUT") {
                InputValidation(obj, value);
            }
            else if (tag == "TEXTAREA") {
                InputValidation(obj, value);
            }
        } else {
            obj.classList.remove("is-valid");
        }

        //trigger
        TriggerHandler(obj, Name, value, dataRule, dataItem);
        try {
            obj.form.classList.add("needs-validation");
            obj.form.classList.remove("is-valid");
            obj.form.classList.remove("was-validated");
        }
        catch (ex) {
            //we assume the obj is part of a form but may not always be the case
        }
    }

    function InputValidation(obj, value) {
        if (obj.type == "number") {
            if (value >= 0) {
                obj.classList.add("is-valid");
                obj.classList.remove("is-invalid");
            } else {
                obj.classList.remove("is-valid");
                obj.classList.add("is-invalid");
            }
        } else {
            if (value != "") {
                obj.classList.add("is-valid");
                obj.classList.remove("is-invalid");
            } else {
                obj.classList.remove("is-valid");
                obj.classList.add("is-invalid");
            }
        }
    }

    function SelectValidation(obj, value) {
        debugger;
        if (!obj.multiple) {
            if (value != "0") {
                obj.classList.add("is-valid");
                obj.classList.remove("is-invalid");
            }
            else {
                obj.classList.remove("is-valid");
                obj.classList.add("is-invalid");
            }
        }
        else {
            if (value != "") {
                obj.classList.add("is-valid");
                obj.classList.remove("is-invalid");
            }
            else {
                obj.classList.remove("is-valid");
                obj.classList.add("is-invalid");
            }
        }
    }

    function DefaultRule(Value, Name) {
        if (Value === "1") {
            ShowElement(Name);
        } else {
            HideElement(Name);
        }
    }

    function TriggerHandler(obj, Name, Value, Rule, DataItem) {
        try {
            //all rules go here
            if (obj.type == "checkbox") {
                if (obj.checked === true) {
                    Value = "1";
                } else {
                    Value = "2";
                }
            }
            if (Value == 'true' || Value == 'false') {
                if (Value == 'true') {
                    Value = "1";
                }
                else {
                    Value = "2";
                }
            }

            DefaultRule(Value, Name);
            if (Rule === "Clear") {
                if (Value == 2) {
                    ClearObject(DataItem);
                }
            }
            if (Rule === "ContractingService") {
                if (Value != "10" && Value != "") {
                    Value = "1";
                    DefaultRule(Value, Name);
                }
            }
            if (Rule === "Reverse") {
                if (Value == "2") {
                    Value = "1";
                } else {
                    Value = "2";
                }
                DefaultRule(Value, Name);
            }
            if (Rule === "OptionOnChange") {
                OptionOnChange(obj)
                Name = obj.options[obj.selectedIndex].value;
                Value = "1";
                DefaultRule(Value, Name);
            }
            if (Rule === "BuildSharedTable") {
                BuildSharedTable(DataItem, Name);
                Value = "1";
                DefaultRule(Value, Name);
            }
            if (Rule === "CyberLabel") {
                var Value = DoubleConditional(DataItem);
                var ids = DataItem.split(',');
                var element = document.getElementById(ids[0]);

                Value = CreateCyberLabelInput(Value, element, ids[2]);
                DefaultRule(Value, element.name);
            }
            if (Rule === "CyberOptional") {
                Value = DoubleConditional(DataItem);
                if (Value != "1") {
                    Value = "2";
                }
                var ids = DataItem.split(',');
                var element = document.getElementById(ids[0]);
                DefaultRule(Value, element.name);
            }
            if (Rule === "FABConditional") {
                var ids = DataItem.split(',');
                document.getElementById(ids[0]).hidden = true;
                document.getElementById(ids[1]).hidden = true;
                if (Value == "1") {
                    document.getElementById(ids[0]).hidden = false;
                }
                else if (Value == "2") {
                    document.getElementById(ids[1]).hidden = false;
                }
            }
            if (Rule === "DNOOptional") {
                Value = DoubleConditional(DataItem);
                if (Value == "both") {
                    Value = "1";
                }
                else {

                }
                var ids = DataItem.split(',');
                var element = document.getElementById(ids[1]);
                DefaultRule(Value, element.name);
            }
            if (Rule === "ValidateOnSubmit") {
                var ids = DataItem.split(',');
                obj.setAttribute('data-onsubmititem', ids[1]);
                DefaultRule(Value, Name);
            }
            if (Rule === "ReverseValidateOnSubmit") {
                var tempVal = Value
                var ids = DataItem.split(',');
                if (tempVal == "1") {
                    obj.setAttribute('data-onsubmititem', ids[1]);
                    Value = "2";
                }
                if (tempVal == "2") {
                    obj.removeAttribute('data-onsubmititem');
                    Value = "1";
                }
                DefaultRule(Value, Name);
            }
            if (Rule === "ValidateSharedTable") {
                if (DataItem === "validatetableactivities") {
                    AdditionalActivityInformation("activities");
                }
                if (DataItem === "validatetabledataroles") {
                    AdditionalRoleInformation("dataroles");
                }
            }
            if (Rule === "AAASL") {
                var Value = SLDoubleConditional(DataItem);
                var ids = DataItem.split(',');
                var element = document.getElementById(ids[0]);

                Value = CreateAAASLLabelInput(Value, element, ids[1]);
                DefaultRule(Value, element.name);
            }
            if (Rule === "OTAlert") {
                var sheetstatus = document.getElementById("ClientInformationSheet_Status").value;
                if (sheetstatus == "Started") {
                   var OTAlert = "Please ensure that you provide details in the notification section";
                   Value = ShowAlert(Value, OTAlert);
                }
            }
            if (Rule === "OrganisationType") {
                OrganisationTypeOnChange(Value);
            }
            if (Rule === "OrganisationEmail") {
                var Form = document.getElementById("organisationViewModel");
                $.ajax({
                    url: '@Url.Action("ValidateOrganisationEmail", "Organisation")',
                    type: "POST",
                    data: $("#" + Form.id).serialize(),
                    success: function (Data) {
                        var element = document.getElementById("User.Email");
                        if (Data == true) {
                            element.classList.remove("is-valid");
                            element.classList.add("is-invalid");
                        }
                        else {
                            element.classList.remove("is-invalid");
                            element.classList.add("is-valid");
                        }
                    }, error: function (request, error) {
                        debugger;
                    }
                });
            }
            if (Rule === "GetMilestone") {
                var Form = document.getElementById("MilestoneViewModel");
                $.ajax({
                    url: '@Url.Action("GetMilestone", "Milestone")',
                    type: "POST",
                    data: $("#" + Form.id).serialize(),
                    success: function (Data) {
                        var OutPut = JSON.parse(Data);
                        PopulateMilestoneView("", OutPut);
                    }, error: function (request, error) {
                        debugger;
                    }
                });
            }
            if (Rule === "DefaultEffectiveDate") {
                debugger;
                var datefix = Value.replaceAll('-', '');
                var year = datefix.substring(0, 4);
                var month = datefix.substring(4, 6);
                var day = datefix.substring(6, 8);
                var newDate = new Date(year, month - 1, day);
                debugger;
                $('#AddBoatEffectiveDate').datepicker('option', 'minDate', newDate);
                $('#BoatEffectiveDate').datepicker('option', 'minDate', newDate);
                $('#AddEffectiveDate').datepicker('option', 'minDate', newDate);
                $('#AddPlantEffectiveDate').datepicker('option', 'minDate', newDate);
                $('#EffectiveDate').datepicker('option', 'minDate', newDate);
                $('#MotorEffectiveDate').datepicker('option', 'minDate', newDate);
                $('#TrailerEffectiveDateModal').datepicker('option', 'minDate', newDate);

                document.getElementById("AddBoatEffectiveDate").value = Value;
                document.getElementById("BoatEffectiveDate").value = Value;
                document.getElementById("AddEffectiveDate").value = Value;
                document.getElementById("AddPlantEffectiveDate").value = Value;
                document.getElementById("EffectiveDate").value = Value;
                document.getElementById("MotorEffectiveDate").value = Value;
                document.getElementById("TrailerEffectiveDateModal").value = Value;
                document.getElementsByClassName("commonjobdate").value = Value;

                
               
            }
            if (Rule === "PolicyStartDate") {
                debugger;
                var datefix = Value.replaceAll('-', '');
                 var year = datefix.substring(0, 4);
                var month = datefix.substring(4, 6);
                var day = datefix.substring(6, 8);
                var selecteddate = new Date(year, month, day);
                var maxyear = selecteddate.getFullYear() + 1;
                var minday = new Date();
                
                var maxDate = new Date();
                maxDate = maxyear + '-' + month + '-' + day;
                var minmonth = minday.getMonth();
                   minmonth=  minmonth < 10 ? '0' + minmonth : '' + minmonth;
                var minyr = minday.getFullYear();
                var mindate = minday.getDate();
                var mindate = minyr+'-' + minmonth + '-' + mindate;
                if (Value == '') {
                    document.getElementById("i2ipolicystartdate").value = Value;
                    document.getElementById("i2iPolicyEndDate").value = Value;
                    
                } 
                    document.getElementById("i2ipolicystartdate").setAttribute("min", mindate);
                    document.getElementById("i2iPolicyEndDate").setAttribute("max", maxDate);
                    document.getElementById("i2iPolicyEndDate").setAttribute("min", Value);
                debugger;
                

               
            } 
            //   if (Rule === "PolicyEndDate") {
            //    debugger;
            //    var datefix = Value.replaceAll('-', '');
            //    var year = datefix.substring(0, 4);
            //    var month = datefix.substring(4, 6);
            //    var day = datefix.substring(6, 8);
            //       var newYear = new Date(year, month - 1, day).getFullYear() + 3;
            //    if (Value == '') {
            //        document.getElementById("i2ipolicystartdate").value = Value;
            //        document.getElementById("i2iPolicyEndDate").value = Value;
                    
            //    } 
            //    if (Value == '') {
            //        var startdateval = document.getElementById("PolicyEndDate").value(); 
            //    }
            //    document.getElementById("PolicyEndDate").value = newYear;
               
            //}
            if (Rule === "OtherOptions") {
                if (obj.multiple) {
                    for (var i = 0; i < obj.selectedOptions.length; i++) {
                        if (obj.selectedOptions[i].value != "Other") {
                            DefaultRule("2", Name);
                        } else {
                            DefaultRule("1", Name);
                            break;
                        }
                    }
                }
                else if (Value == "Other") {
                    DefaultRule("1", Name);
                }
                else {
                    DefaultRule("2", Name);
                }
            }
            if (Rule == "ValidateDateOfCommencement") {
                var id = document.getElementById("ClientProgramme_Id");
                $.ajax({
                    url: '@Url.Action("ValidateDateOfCommencement", "Services")',
                    type: "POST",
                    data: { Id: id.value, Date: Value},
                    success: function (Data) {
                        var element = document.getElementById("AdvisorUnit.DateofCommencement");
                        if (Data == true) {
                            element.classList.remove("is-valid");
                            element.classList.add("is-invalid");
                        }
                        else {
                            element.classList.remove("is-invalid");
                            element.classList.add("is-valid");
                        }
                    }, error: function (request, error) {
                        debugger;
                    }
                });
            }
            if (Rule == "AttachOrganisationEmail") {
                var Form = document.getElementById("attachOrganisationViewModel");
                $.ajax({
                    url: '@Url.Action("ValidateAttachOrganisationEmail", "Organisation")',
                    type: "POST",
                    data: $("#" + Form.id).serialize(),
                    success: function (Data) {
                        var element = document.getElementById("RemovedOrganisation.Email");
                        if (Data == true) {
                            element.classList.remove("is-valid");
                            element.classList.add("is-invalid");
                            ShowElement(Name);
                        }
                        else {
                            element.classList.remove("is-invalid");
                            element.classList.add("is-valid");
                            ShowElement(Name);
                        }
                    }, error: function (request, error) {
                        debugger;
                    }
                });
            }
        } catch (ex) {
            //these rules need to be re-run regardless of the catch
            ////we expect this to fail for form elements with no change events but could use this later
        }
    }

    function CreateAAASLLabelInput(Value, Element, LabelId) {
        var conditional = " If you have answered 'No' then NZI are unable to offer this extension";
        var label = document.getElementById(LabelId);
        if (Value == "2" || Value == "both") {
            if (label == null) {
                label = AttachLabel(LabelId, conditional);
                Element.parentElement.parentElement.appendChild(label);
            }
            return "2";
        }
        if (Value == "1") {
            if (label != null) {
                Element.parentElement.parentElement.removeChild(label);
            }
            return "1";
        }
        return "0";
    }

    function OrganisationTypeOnChange(Value) {
        //reset views to default
        ResetOrganisationUnitView();

        var List = document.getElementById("Organisation.OrganisationType");
        List.disabled = false;
        if (Value == "Advisor" ||
            Value == "Personnel" ||
            Value == "Principal" ||
            Value == "Administration" ||
            Value == "Nominated Representative" ||
            Value == "Contractor" ||
            Value == "Planner" ||
            Value == "Skipper" ||
            Value == "Mentored Advisor" || 
            Value == "Individual") {
            //readonly Organisation Type personal

            if (Value == "Administration") {
                AdvisorOnChange();
            }

            if (Value == "Mentored Advisor") {
                AdvisorOnChange();

            }

            if (Value == "Nominated Representative") {
                AdvisorOnChange();
            }

            if (Value == "Contractor") {
                ContractorOnChange();
            }

            for (var i = 0; i < List.options.length; i++) {
                if (List.options[i].text == "Private") {
                    List.options[i].selected = true;
                    document.getElementById("Private").hidden = false;
                }
            }

            List.disabled = true;
        } else {
            document.getElementById("Else").hidden = false;
            if (Value == "Other Consulting Business") {
                var NoTradingName = document.getElementById("NoTradingName");
                if (NoTradingName != null) {
                    document.getElementById("TradingName").hidden = false;
                    var TradingName = document.getElementById("Organisation.TradingName");
                    TradingName.hidden = false;
                    TradingName.removeAttribute("required");
                }
            }
        }

        DefaultRule("1", Value);
    }

    function ContractorOnChange() {
        var IsContractorUnit = document.getElementById("HideContractor");
        if (IsContractorUnit != null) {
            IsContractorUnit.hidden = false;
        }
        var IsPrincipal = document.getElementById("HidePrincipal");
        if (IsPrincipal != null) {
            IsPrincipal.hidden = true;
        }
        document.getElementById("PlannerUnit.IsPrincipalPlanner").options[0].selected = true;
    }

    function AdvisorOnChange() {
        var IsTripleAApproval = document.getElementById("HideTripleAApproval");
        if (IsTripleAApproval != null) {
            IsTripleAApproval.hidden = true;
            document.getElementById("AdvisorUnit.IsPrincipalAdvisor").options[0].selected = true;
        }
        var IsCommencement = document.getElementById("HideCommencement");
        if (IsCommencement != null) {
            IsCommencement.hidden = false;
        }
        var IsPrincipal = document.getElementById("HidePrincipal");
        if (IsPrincipal != null) {
            IsPrincipal.hidden = true;
        }

    }

    function ResetOrganisationUnitView() {
        document.getElementById("Private").hidden = true;
        document.getElementById("Else").hidden = true;
        var IsPrincipal = document.getElementById("HidePrincipal");
        if (IsPrincipal != null) {
            IsPrincipal.hidden = false;
        }
        var IsTripleAApproval = document.getElementById("HideTripleAApproval");
        if (IsTripleAApproval != null) {
            IsTripleAApproval.hidden = false;
        }
        var IsContractor = document.getElementById("HideContractor");
        if (IsContractor != null) {
            IsContractor.hidden = true;
        }
        var IsCommencement = document.getElementById("HideCommencement");
        if (IsCommencement != null) {
            IsCommencement.hidden = true;
        }
    }

    function AdditionalActivityInformation(Id) {
        var activities = document.getElementById(Id);
        var element;
        //convert to use selectedOptions
        for (var i = 0; i < activities.options.length; i++) {
            var additionalactivityId = activities.options[i].value;
            if (additionalactivityId == "CUS0029" || additionalactivityId == "CUS0039" || additionalactivityId == "CUS0044" || additionalactivityId == "CUS0061" ||
                additionalactivityId == "CUS0076" || additionalactivityId == "customict010") {
                additionalactivityId = "CUS0018";
            }
            if (activities.options[i].selected === true) {
                element = document.getElementById(additionalactivityId);
                if (element != null) {
                    element.hidden = false;
                }
            } else {
                element = document.getElementById(additionalactivityId);
                if (element != null) {
                    element.hidden = true;
                }
            }
        }
        document.getElementById("noadditionalactivityinfolabel").hidden = false;
        var additionalinfotab = document.getElementById("RevenueTab3");
        for (var d = 1; d < additionalinfotab.children.length; d++) {
            if (additionalinfotab.children[d].hidden == false) {
                document.getElementById("noadditionalactivityinfolabel").hidden = true;
            }
        }
    }

    function AdditionalRoleInformation(Id) {
        var roles = document.getElementById(Id);
        document.getElementById("noadditionalroleinfolabel").hidden = false;
        document.getElementById("RoleOther").hidden = true;
        //convert to use selectedOptions
        for (var i = 0; i < roles.options.length; i++) {
            if (roles.options[i].selected === true) {
                var strArray = roles.options[i].text.split('-');
                var other = strArray[strArray.length - 1];
                if (other.search("Other") != -1) {
                    document.getElementById("noadditionalroleinfolabel").hidden = true;
                    document.getElementById("RoleOther").hidden = false;
                }
            }
        }
    }

    function DoubleConditional(DataItem) {
        var ids = DataItem.split(',');
        var q1 = document.getElementById(ids[0]);
        var q2 = document.getElementById(ids[1]);

        if (q1.value == "1" && q2.value == "1") {
            return "1";
        }
        else if (q1.value == "2" && q2.value == "2") {
            return "2";
        }
        else if (q1.value == "2" && q2.value == "1" || q1.value == "1" && q2.value == "2") {
            //default to ?
            return "both";
        }
        else
            return "0";
    }

    function SLDoubleConditional(DataItem) {
        var ids = DataItem.split(',');
        var q1 = document.getElementById(ids[0]);

        if (q1.value == "1") {
            return "1";
        }
        else if (q1.value == "2") {
            return "2";
        } else
            return "0";
    }

    function BuildSharedTable(DataItem, Name) {
        var array = DataItem.split(',');
        var list = document.getElementById(array[0]);
        var tableElement = document.getElementById(array[1]);
        if (tableElement.children.length == 2) {
            tableElement.removeChild(tableElement.children[1]);
        }
        var tbdy = document.createElement('tbody');
        for (var t = 0; t < list.options.length; t++) {
            if (list.options[t].selected === true) {
                var tr = document.createElement('tr');
                var td1 = document.createElement('td');
                td1.appendChild(document.createTextNode(list[t].text));
                tr.appendChild(td1);
                var td2 = document.createElement('td');
                td2.innerHTML = CreateSharedInput(Name, list.options[t]);
                tr.appendChild(td2);
                tbdy.appendChild(tr);
            }
        }
        tableElement.appendChild(tbdy);
    }

    function CreateSharedInput(Id, element) {
        var input = document.createElement("input");
        input.setAttribute("name", Id + "." + element.value);
        input.setAttribute("id", element.text);
        input.setAttribute("class", "form-control");
        input.setAttribute("type", "number");
        input.setAttribute("data-rule", "ValidateSharedTable");
        input.setAttribute("data-item", "validatetable" + element.parentElement.id);
        input.setAttribute("onchange", "OnChange(this.id, this.name)");
        input.setAttribute("value", 0);
        return input.outerHTML;
    }

    function CreateCyberLabelInput(Value, Element, LabelId) {
        var conditional = "As you have answered no to one or both of the above questions then NZI are not able to provide Cyber Ultra cover and you will not be provided with an automatic quotation. Please contact your broker for more information.";
        var label = document.getElementById(LabelId);
        if (Value == "2" || Value == "both") {
            if (label == null) {
                label = AttachLabel(LabelId, conditional);
                Element.parentElement.parentElement.parentElement.appendChild(label);
            }
            return "2";
        }
        if (Value == "1") {
            if (label != null) {
                Element.parentElement.parentElement.parentElement.removeChild(label);
            }
            return "1";
        }
        return "2";
    }

    function IsElementHidden(Element) {
        var box = Element.getBoundingClientRect();
        if (box.top == 0 &&
            box.left == 0 &&
            box.right == 0 &&
            box.bottom == 0) {
            return true;
        }
        return false;
    }

    function AttachLabel(id, conditional) {
        var label = document.createElement('label');
        label.setAttribute("id", id);
        label.innerHTML = conditional;
        return label;
    }

    function HideElement(id) {
        var element = document.getElementById(id);
        if (element != null) {
            element.hidden = true;
        }
    }

    function ShowElement(id) {
        var element = document.getElementById(id);
        if (element != null) {
            element.hidden = false;
        }
    }

    function ClearObject(Id) {
        var obj = document.getElementById(Id);
        var Tag = obj.tagName;
        //here we can define the changes per type
        if (Tag == "SELECT") {
            for (var i = 0; i < obj.options.length; i++) {
                if (obj.options[i].selected === true) {
                    obj.options[i].selected = false;
                }
            }
            if (!obj.multiple) {
                obj.options[0].selected = true;
            }
        }
    }

    function ValidateTableValues(table) {
        var percentage = 0;
        for (var v = 0; v < table.length; v++) {
            percentage += parseInt(table[v].value);
        }
        if (percentage != 100) {
            alert("Percentage calculation does not equal to 100%");
            return false;
        }
        return true;
    }

    function OptionOnChange(Element) {
        debugger;
        for (var i = 0; i < Element.options.length; i++) {
            DefaultRule("2", Element.options[i].value);
        }
    }

    function ShowAlert(Value, show) {
        if (Value == "1") {
            if (show != null) {
                alert(show);
            }
            return Value;
        }
        return Value;
    }

</script>