<script type="text/javascript">

        $(document).ready(function () {

            var questionmodal = document.getElementById('questionmodal').innerHTML;

            $('#smartwizardprogramme').smartWizard({
                selected: 0,  // Initial selected step, 0 = first step
                keyNavigation: true, // Enable/Disable keyboard navigation(left and right keys are used if enabled)
                autoAdjustHeight: true, // Automatically adjust content height
                cycleSteps: false, // Allows to cycle the navigation of steps
                backButtonSupport: true, // Enable the back button support
                useURLhash: true, // Enable selection of the step based on url hash
                lang: {  // Language variables
                    next: 'Save and Continue',
                    previous: 'Previous'
                },
                toolbarSettings: {
                    toolbarPosition: 'bottom', // none, top, bottom, both
                    toolbarButtonPosition: 'right', // left, right
                    showNextButton: true, // show/hide a Next button
                    showPreviousButton: false, // show/hide a Previous button

                },
                anchorSettings: {
                    anchorClickable: true, // Enable/Disable anchor navigation
                    enableAllAnchors: false, // Activates all anchors clickable all times
                    markDoneStep: true, // add done css
                    enableAnchorOnDoneStep: true // Enable/Disable the done steps navigation
                },
                contentURL: null, // content url, Enables Ajax content loading. can set as data data-content-url on anchor
                disabledSteps: [],    // Array Steps disabled
                errorSteps: [],    // Highlight step with errors
                theme: 'dots',
                transitionEffect: 'fade', // Effect on navigation, none/slide/fade
                transitionSpeed: '400'
            });

            $('#questionsectionwizard').smartWizard({
                selected: 0,  // Initial selected step, 0 = first step
                keyNavigation: true, // Enable/Disable keyboard navigation(left and right keys are used if enabled)
                autoAdjustHeight: true, // Automatically adjust content height
                cycleSteps: false, // Allows to cycle the navigation of steps
                backButtonSupport: true, // Enable the back button support
                useURLhash: true, // Enable selection of the step based on url hash
                lang: {  // Language variables
                    next: 'Next',
                    previous: 'Previous'
                },
                toolbarSettings: {
                    toolbarPosition: 'bottom', // none, top, bottom, both
                    toolbarButtonPosition: 'right', // left, right
                    showNextButton: true, // show/hide a Next button
                    showPreviousButton: false, // show/hide a Previous button

                },
                anchorSettings: {
                    anchorClickable: true, // Enable/Disable anchor navigation
                    enableAllAnchors: false, // Activates all anchors clickable all times
                    markDoneStep: true, // add done css
                    enableAnchorOnDoneStep: true // Enable/Disable the done steps navigation
                },
                contentURL: null, // content url, Enables Ajax content loading. can set as data data-content-url on anchor
                disabledSteps: [],    // Array Steps disabled
                errorSteps: [],    // Highlight step with errors
                theme: 'dots',
                transitionEffect: 'fade', // Effect on navigation, none/slide/fade
                transitionSpeed: '400'
            });

            $("#smartwizardprogramme").on("leaveStep", function (e, anchorObject, stepNumber, stepDirection) {
                if (stepDirection == "forward") {
                    if (stepNumber == 0) {
                        var form = document.getElementById('programmeform');
                        form.classList.add('was-validated');
                        if (form.checkValidity() === false) {
                            throw "stop process";
                        }
                        else {
                            form.submit();
                        }
                    }
                    else if (stepNumber == 1) {
                        var form = document.getElementById('productform');
                        form.classList.add('was-validated');
                        if (form.checkValidity() === false) {
                            throw "stop process";
                        }
                        else {
                            form.submit();
                        }
                    }
                    else if (stepNumber == 2) {
                        var form = document.getElementById('templateform');
                        form.classList.add('was-validated');
                        form.submit();
                    }
                    else if (stepNumber == 3) {
                        var form = document.getElementById('informationform');
                        form.classList.add('was-validated');
                        if (form.checkValidity() === false) {
                            debugger;
                            throw "stop process";
                        }
                        else {
                            debugger;
                            form.submit();
                        }
                    }
                }
            });

            $("#questionsectionwizard").on("leaveStep", function (e, anchorObject, stepNumber, stepDirection) {
                if (stepDirection == "forward") {
                    if (stepNumber == 0) {
                        CreateQuestionType();
                    }
                    if (stepNumber == 2) {
                        AddQuestion();
                        //form.classList.add('was-validated');
                        //if (form.checkValidity() === false) {
                        //    throw "stop process";
                        //}
                        //else {
                        //    form.submit();
                        //}
                    }
                }
            });

        });

        function CreateQuestionType() {
            var type = document.getElementById('questiontype').value;
            var input = document.createElement("input");
            input.setAttribute("type", "hidden");
            input.setAttribute("name", "questiontypeinput");
            input.setAttribute("value", type);
            document.getElementById("questionmodalbody").appendChild(input);
        }

        function TriggerInput(trigger) {
            if (trigger === "textTemplate") {
                var input = document.createElement("input");
                input.id = 'triggeranswer';
                input.name = 'triggeranswer';
                input.value = "";
                input.placeholder = "Enter Trigger Value";
                input.classList.add("form-control");
                return input;
            }
            else if (trigger === "dropdownTemplate") {
                var valueobjs = document.getElementsByName('dropdownvalue');
                var select = document.createElement("SELECT");
                var option = document.createElement("option");
                option.text = 'Enter Trigger Value';
                option.selected = true;
                select.options.add(option);
                for (var i = 0; i < valueobjs.length; i++) {
                    var option = document.createElement("option");
                    option.text = valueobjs[i].value;
                    select.options.add(option);
                }
                select.id = 'triggeranswer';
                select.name = 'triggeranswer';
                select.classList.add("custom-select");
                return select;
            }
            else {
                var valueobjs = document.getElementsByName('dropdownvalue');
                var select = document.createElement("select");
                var option = document.createElement("option");
                option.text ='Yes';
                select.options.add(option);
                option = document.createElement("option");
                option.text ='No';
                select.options.add(option);
                var option = document.createElement("option");
                option.text = 'Enter Trigger Value';
                option.selected = true;
                select.options.add(option);
                select.id = 'triggeranswer';
                select.name = 'triggeranswer';
                select.classList.add("custom-select");
                return select;
            }
            return
        }

        function ToggleContent() {

            var checked = document.getElementById('conditional').checked;
            var container = document.getElementById('conditionalcontent')
            if (checked === true) {
                container.classList.toggle("invisible", false);
                container.classList.toggle("visible", true);
            } else {
                container.classList.toggle("invisible", true);
                container.classList.toggle("visible", false);
            }
            var trigger = document.getElementsByName('questiontypeinput').value;
            var child = TriggerInput(trigger);
            document.getElementById('trigger').appendChild(child);
        }

        function CreateInput(name, id) {
            var input = document.createElement("input");
            input.setAttribute("type", "hidden");
            input.setAttribute("name", name);
            input.setAttribute("value", id);
            document.getElementById("templateform").appendChild(input);
        }

        function AddQuestion() {
            var templateId = "";
            var sectionId = "";
            var itemId = "";
            var model = $("#templateform").serialize();

            $.ajax({ // make an AJAX request
                type: "POST",
                url: '..@Url.Action("CreateItem", "InformationTemplate")', // it's the URL of your component B
                data: model, // serializes the form's elements
                async: false,
                success: function (data)
                {
                    templateId = data.templateId;
                    sectionId = data.sectionId;
                    itemId = data.itemId;
                }
            });
            document.getElementById('templateId').value = templateId;
            CreateInput("sectionId", sectionId);
            CreateTableRow(itemId);
            CreateSection();

            //may reset modal
            document.getElementById('questionmodal').innerHTML = questionmodal;
            $('#questionmodal').modal('hide');
        }

        function CreateSection() {
            var questionvalue = document.getElementById('questiontype').value;
            var questiontext = document.getElementById('question').value;
            var obj = null;
            if (questionvalue === "textTemplate") {
                obj = document.createElement("input");
                obj.setAttribute("class", "form-control");
                obj.setAttribute("type", "text");
                obj.setAttribute("placeholder", questiontext);
            }
            else {
                obj = document.createElement("select");
                obj.setAttribute("class", "custom-select");
                var opt = document.createElement('option');
                // create text node to add to option element (opt)
                opt.appendChild(document.createTextNode(questiontext));
                obj.appendChild(opt);
            }
            document.getElementById("sectionpreview").appendChild(obj);
        }


        function CreateTableRow(itemId) {
            var hasConditional = document.getElementById('conditionalquestion').checked;
            var selectlist = document.getElementById('questiontype');
            var table = document.getElementById('questiontable');
            table.classList.toggle("invisible", false);
            table.classList.toggle("visible", true);

            var row = table.insertRow();
            var cell = row.insertCell();
            var cell2 = row.insertCell();
            var cell3 = row.insertCell();

            var questiontype = selectlist.options[selectlist.selectedIndex].text;
            cell.innerHTML = questiontype;
            cell2.innerHTML = 'delete button';

            if (hasConditional === true) {
                cell3.innerHTML = '<a class="btn btn-sm btn-primary text-light" data-toggle="modal" data-target="#conditionalquestionmodal' + itemId + '"> need to change this to edit!</a>';
            }
        }

        function DisplayTemplate() {
            var selected = document.getElementById('questiontype').value;
            if (selected == 'dropdownTemplate') {
                document.getElementById("dropdownTemplate").classList.toggle("invisible", false);
                document.getElementById("dropdownTemplate").classList.toggle("visible", true);
            }
            else {
                document.getElementById("dropdownTemplate").classList.toggle("invisible", true);
                document.getElementById("dropdownTemplate").classList.toggle("visible", false);
            }
        }

        function DisplayConditionalTemplate() {
            var selected = document.getElementById('conditionalquestiontype').value;
            if (selected == 'dropdownTemplate') {
                document.getElementById("conditionaldropdownTemplate").classList.toggle("invisible", false);
                document.getElementById("conditionaldropdownTemplate").classList.toggle("visible", true);
            }
            else {
                document.getElementById("conditionaldropdownTemplate").classList.toggle("invisible", true);
                document.getElementById("conditionaldropdownTemplate").classList.toggle("visible", false);
            }
        }

        function AddDropdownInput() {
            document.getElementById('dropdownTemplate').innerHTML
    }

    $("#checkedAll").click(function () {
        debugger;
        if (this.checked) {
            $(".PartyOrg").each(function () {
                this.checked = true;
            });
        } else {
            $(".PartyOrg").each(function () {
                this.checked = false;
            });
        }
    });


    $(".PartyOrg").click(function () {
        debugger;

        if ($(this).is(":checked")) {
            var isAllChecked = 0;

            $(".PartyOrg").each(function () {
                if (!this.checked)
                    isAllChecked = 1;
            });

            if (isAllChecked == 0) {
                $("#checkedAll").prop("checked", true);
            }
        }
        else {
            $("#checkedAll").prop("checked", false);
        }
    });


     function getseletedorgUser() {
        debugger;
        var InformationId = $('#Id').val();
        var postdata = { informationId: InformationId};
         $.ajax({
             url: '@Url.Action("getselectedParty", "Programme")',
             type: "Post",
             data: postdata
         })
            .done(function (data) {
                debugger;

                $.each(data, function (i, item) {
                      $("input[value = '" + item + "']").attr('checked', 'checked');
                });

            }).fail(function (a, s, d) {
                debugger;
            });
     };

    function selectorgUser() {
        debugger;///
        var SelectedParty = $('#selectParty').val();
        var InformationId = $('#Id').val();
        var postdata = {selectedParty : SelectedParty , informationId: InformationId};
        $.ajax({
            url: '@Url.Action("selectedParty", "Programme")',
            type: "Post",
            data: postdata
        })
            .done(function (data) {
                debugger;
                var availableoptions = [];
                $.each(data, function (i, item) {

                    availableoptions[i] = item.email;
                });

                  if (data.length > 0) {
                    $('#div1').empty();
                    $('#div1').append("<label class=\"label\" id=\"SelectedUser\">Select User to notify:</label><br>");
                } else {
                    $('#div1').empty();
                };

                $.each(data, function (i, item) {
                    $('#div1').append("<div class=\"input-group\"><div class=\"input-group-prepend\"> " +
                        "<div class=\"input-group-text\"><input type=\"checkbox\" name=\"selectedEmail\" value=\"" + item.email + "\"> " +
                        "</div ></div > <input type=\"text\" class=\"form-control\" name=\"PartyOrg\" value=" + item.name + ">" +
                            "</div ></div >");
                });

                getseletedorgUser();

            });
    };

    function boxdisable(source) {
       debugger;
     var checkboxes = document.querySelectorAll('input[type="checkbox"]');
    for (var i = 0; i < checkboxes.length; i++) {
        if (checkboxes[i] != source)
            checkboxes[i].checked = source.checked;
    }
    }

    function addselectorgUser(Title) {

        var test = document.getElementById("issueNotifyForm");

        $.ajax({
            url: '@Url.Action("AddselectedParty", "Programme")',
            type: "Post"
        })
        .done(function (data) {
            debugger;
        }).fail(function (a, s, d) {
            debugger;
        });
    };

    $('#myModal').on('show.bs.modal', function (e) {
        debugger;

        $('.modal').css('width', '600px');
        var RuleName = $(e.relatedTarget).data('rule-name');
        debugger;
        var RuleDesc = $(e.relatedTarget).data('rule-desc');
        var RuleOrder = $(e.relatedTarget).data('rule-order');
        var RuleVal = $(e.relatedTarget).data('rule-val');
        var RulId = $(e.relatedTarget).data('rule-id');
        $(e.currentTarget).find('input[name="Name"]').val(RuleName);
        $(e.currentTarget).find('input[name="Description"]').val(RuleDesc);
        $(e.currentTarget).find('input[name="OrderNumber"]').val(RuleOrder);
        $(e.currentTarget).find('input[name="Value"]').val(RuleVal);
        $(e.currentTarget).find('input[name="Id"]').val(RulId);

    });


    $("#rulebtnSubmit").click(function () {
            RuleSubmit();
    });

    function RuleSubmit() {
        debugger;
        var productId = $("#ProductId").val();
        var ID = $("#Id").val();

        var RuleId = $("#RuleId").val();
        var RuleName = $("#RuleName").val();
        var RuleDesc = $("#RuleDesc").val();
        var RuleOrder = parseInt($("#RuleOrder").val());
        var RuleVal = $("#RuleVal").val();

        var prodData = {
            "Name": RuleName,
            "Description": RuleDesc,
            "OrderNumber": RuleOrder,
            "Value": RuleVal,
            "ClientAgreementRuleID": RuleId
        };

          $.ajax({
                url: '@Url.Action("EditRule", "Programme")',
              type: "Post",
              data: prodData

            })
                .done(function (data) {
                    debugger;
                    alert("success");
                    $("#myModalId").click();
                    location.reload(true);

                })
              .fail(function (jqXHR, textStatus, errorThrown) {
                  debugger;
                    alert("There was an error while trying to save the Boat Use.");
            });


    }


</script>